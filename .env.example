# =============================================================================
# hao-backprop-test - Environment Configuration Template
# =============================================================================
# This file serves as a template for environment variable configuration for the
# Express.js application. Copy this file to .env and customize values for your
# specific deployment environment.
#
# Environment variable precedence: .env file < system environment < runtime
# =============================================================================

# -----------------------------------------------------------------------------
# SERVER CONFIGURATION
# -----------------------------------------------------------------------------

# HTTP Server Port
# The port number for the Express.js server to bind to
# Default: 3000 (maintains backward compatibility)
# Production: Can be overridden by hosting platform
PORT=3000

# Server Host Binding
# Interface address for Express.js server binding
# Default: 127.0.0.1 (localhost only for security)
# Note: Should remain localhost for security and testing requirements
HOST=127.0.0.1

# Application Environment
# Determines application behavior and feature flags
# Options: development | staging | production
# Default: development
NODE_ENV=development

# -----------------------------------------------------------------------------
# LOGGING CONFIGURATION (Winston Framework)
# -----------------------------------------------------------------------------

# Logging Level
# Controls the minimum severity level for log output
# Options: error | warn | info | http | verbose | debug | silly
# Development: debug (verbose logging for debugging)
# Production: info (balanced logging for monitoring)
LOG_LEVEL=info

# Log Format
# Determines the format for console and file log output
# Options: simple | json | combined | dev | short | tiny
# Development: dev (colorized, human-readable)
# Production: json (structured logging for analysis)
LOG_FORMAT=combined

# Log File Configuration
# Enable/disable file-based logging
# Options: true | false
# Development: false (console only)
# Production: true (file-based with rotation)
ENABLE_FILE_LOGGING=false

# Log File Directory
# Directory path for Winston log file storage
# Default: ./logs (relative to project root)
# Production: Absolute path recommended for clarity
LOG_DIR=./logs

# Log File Retention
# Number of days to retain log files (Winston daily rotate)
# Default: 7 days (balances debugging needs with storage)
# Production: 30 days or per compliance requirements
LOG_RETENTION_DAYS=7

# Maximum Log File Size
# Size limit for individual log files before rotation
# Default: 20MB (optimal for parsing and storage)
# Format: size in MB (e.g., 20m) or bytes
MAX_LOG_FILE_SIZE=20m

# Maximum Log Files
# Maximum number of log files to retain
# Default: 14 files (2 weeks of daily logs)
# Production: Adjust based on storage capacity
MAX_LOG_FILES=14

# Enable Log Compression
# Compress rotated log files to save storage space
# Options: true | false
# Production: true (recommended for storage efficiency)
COMPRESS_LOGS=true

# -----------------------------------------------------------------------------
# HTTP REQUEST LOGGING (Morgan Middleware)
# -----------------------------------------------------------------------------

# Morgan Log Format
# HTTP request logging format for Morgan middleware
# Options: combined | common | dev | short | tiny | custom
# Development: dev (colorized status codes)
# Production: combined (detailed request/response data)
MORGAN_FORMAT=combined

# Enable Morgan Logging
# Control Morgan HTTP request logging
# Options: true | false
# Default: true (recommended for monitoring)
ENABLE_MORGAN_LOGGING=true

# Skip Health Check Logging
# Exclude /health endpoint requests from Morgan logs
# Options: true | false
# Production: true (reduces log noise from monitoring)
SKIP_HEALTH_CHECK_LOGS=false

# -----------------------------------------------------------------------------
# PM2 PROCESS MANAGEMENT
# -----------------------------------------------------------------------------

# PM2 Instance Name
# Identifier for PM2 process instance
# Default: hao-backprop-test
PM2_APP_NAME=hao-backprop-test

# Cluster Worker Processes
# Number of worker processes for PM2 cluster mode
# Options: number | max (auto-detect CPU cores) | 0 (fork mode)
# Development: 1 (single process for debugging)
# Production: max (utilize all available CPU cores)
CLUSTER_WORKERS=max

# PM2 Process Management
# Enable/disable PM2 cluster mode features
# Options: true | false
# Production: true (recommended for high availability)
ENABLE_PM2_CLUSTER=true

# Maximum Memory Restart
# Memory threshold for automatic process restart (MB)
# Default: 150MB (accounts for Express.js overhead)
# Adjust based on expected memory usage patterns
PM2_MAX_MEMORY_RESTART=150M

# PM2 Restart Attempts
# Maximum restart attempts before marking process as failed
# Default: 10 attempts
# Production: Adjust based on reliability requirements
PM2_MAX_RESTART_ATTEMPTS=10

# PM2 Restart Delay
# Delay between restart attempts (milliseconds)
# Default: 1000ms (1 second)
# Production: May increase for graceful recovery
PM2_RESTART_DELAY=1000

# -----------------------------------------------------------------------------
# SECURITY CONFIGURATION
# -----------------------------------------------------------------------------

# CORS Origin Configuration
# Allowed origins for cross-origin requests
# Options: * | comma-separated URLs | false (disable CORS)
# Development: * (permissive for testing)
# Production: Specific origins for security
CORS_ORIGIN=*

# CORS Credentials
# Allow credentials in CORS requests
# Options: true | false
# Default: false (security best practice)
CORS_CREDENTIALS=false

# CORS Methods
# Allowed HTTP methods for CORS requests
# Default: GET,HEAD,PUT,PATCH,POST,DELETE
CORS_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE

# CORS Headers
# Allowed headers in CORS requests
# Default: Origin,X-Requested-With,Content-Type,Accept,Authorization
CORS_HEADERS=Origin,X-Requested-With,Content-Type,Accept,Authorization

# Helmet Security Headers
# Enable Helmet security middleware
# Options: true | false
# Production: true (recommended for security)
ENABLE_HELMET=true

# Content Security Policy
# Configure CSP headers via Helmet
# Options: true | false | custom
# Development: false (avoid conflicts with dev tools)
# Production: true (enhanced security)
ENABLE_CSP=false

# HSTS (HTTP Strict Transport Security)
# Enable HSTS headers for HTTPS enforcement
# Options: true | false
# Note: Only relevant if using HTTPS (currently localhost HTTP)
ENABLE_HSTS=false

# -----------------------------------------------------------------------------
# REQUEST PROCESSING CONFIGURATION
# -----------------------------------------------------------------------------

# Request Body Size Limit
# Maximum size for request body parsing
# Default: 100kb (sufficient for API requests)
# Format: size with unit (kb, mb, gb)
BODY_PARSER_LIMIT=100kb

# URL Encoded Parser Configuration
# Enable parsing of URL-encoded request bodies
# Options: true | false
# Default: true (standard web form support)
ENABLE_URL_ENCODED_PARSER=true

# URL Encoded Extended Mode
# Enable extended URL encoding parsing
# Options: true | false
# Default: true (supports nested objects)
URL_ENCODED_EXTENDED=true

# JSON Parser Configuration
# Enable parsing of JSON request bodies
# Options: true | false
# Default: true (API endpoint support)
ENABLE_JSON_PARSER=true

# JSON Parser Strict Mode
# Strict JSON parsing validation
# Options: true | false
# Default: true (enhanced security)
JSON_PARSER_STRICT=true

# -----------------------------------------------------------------------------
# HEALTH CHECK CONFIGURATION
# -----------------------------------------------------------------------------

# Health Check Endpoint
# URL path for health check endpoint
# Default: /health
# Note: Should remain standard for monitoring integration
HEALTH_CHECK_PATH=/health

# Health Check Response Format
# Response format for health check endpoint
# Options: json | text
# Default: json (structured response)
HEALTH_CHECK_FORMAT=json

# Include System Info in Health Check
# Include system information in health check response
# Options: true | false
# Development: true (debugging information)
# Production: false (security - limit information exposure)
HEALTH_CHECK_INCLUDE_SYSTEM_INFO=true

# Health Check Cache
# Cache duration for health check responses (seconds)
# Default: 0 (no caching for real-time status)
# Production: 5-10 seconds (reduce monitoring overhead)
HEALTH_CHECK_CACHE_DURATION=0

# -----------------------------------------------------------------------------
# DEVELOPMENT CONFIGURATION
# -----------------------------------------------------------------------------

# Enable Development Debugging
# Additional debugging features for development
# Options: true | false
# Development: true (enhanced debugging)
# Production: false (performance and security)
ENABLE_DEBUG_MODE=false

# Pretty Print JSON Responses
# Format JSON responses with indentation
# Options: true | false
# Development: true (readable responses)
# Production: false (smaller response size)
PRETTY_PRINT_JSON=false

# Enable Request ID Generation
# Generate unique correlation IDs for request tracking
# Options: true | false
# Production: true (recommended for monitoring)
ENABLE_REQUEST_ID=true

# Request ID Header
# Header name for request correlation ID
# Default: X-Request-ID
# Standardized header for tracing
REQUEST_ID_HEADER=X-Request-ID

# -----------------------------------------------------------------------------
# PERFORMANCE CONFIGURATION
# -----------------------------------------------------------------------------

# Request Timeout
# Maximum time for request processing (milliseconds)
# Default: 30000 (30 seconds)
# Adjust based on expected response times
REQUEST_TIMEOUT=30000

# Keep-Alive Timeout
# HTTP keep-alive timeout for connections (milliseconds)
# Default: 5000 (5 seconds)
# Production: Tune based on load characteristics
KEEP_ALIVE_TIMEOUT=5000

# Enable Compression
# Gzip compression for HTTP responses
# Options: true | false
# Production: true (bandwidth optimization)
ENABLE_COMPRESSION=false

# Compression Level
# Gzip compression level (1-9)
# Default: 6 (balanced compression/performance)
# Higher values = better compression, more CPU usage
COMPRESSION_LEVEL=6

# Compression Threshold
# Minimum response size for compression (bytes)
# Default: 1024 (1KB)
# Avoid compressing small responses
COMPRESSION_THRESHOLD=1024

# -----------------------------------------------------------------------------
# MONITORING AND OBSERVABILITY
# -----------------------------------------------------------------------------

# Enable Metrics Collection
# Collect application performance metrics
# Options: true | false
# Production: true (recommended for monitoring)
ENABLE_METRICS=false

# Metrics Collection Interval
# Frequency of metrics collection (seconds)
# Default: 30 seconds
# Balance between accuracy and overhead
METRICS_INTERVAL=30

# Error Tracking
# Enable error tracking and reporting
# Options: true | false
# Production: true (error monitoring)
ENABLE_ERROR_TRACKING=true

# Error Sample Rate
# Percentage of errors to sample for tracking
# Default: 100 (all errors)
# High-volume applications may reduce sampling
ERROR_SAMPLE_RATE=100

# -----------------------------------------------------------------------------
# ENVIRONMENT-SPECIFIC OVERRIDES
# -----------------------------------------------------------------------------

# Development Environment Overrides
# Uncomment and modify for development-specific settings
# NODE_ENV=development
# LOG_LEVEL=debug
# LOG_FORMAT=dev
# ENABLE_FILE_LOGGING=false
# PRETTY_PRINT_JSON=true
# ENABLE_DEBUG_MODE=true
# CLUSTER_WORKERS=1

# Staging Environment Overrides
# Uncomment and modify for staging-specific settings
# NODE_ENV=staging
# LOG_LEVEL=info
# LOG_FORMAT=json
# ENABLE_FILE_LOGGING=true
# PRETTY_PRINT_JSON=false
# ENABLE_DEBUG_MODE=false
# CLUSTER_WORKERS=2

# Production Environment Overrides
# Uncomment and modify for production-specific settings
# NODE_ENV=production
# LOG_LEVEL=warn
# LOG_FORMAT=json
# ENABLE_FILE_LOGGING=true
# COMPRESS_LOGS=true
# PRETTY_PRINT_JSON=false
# ENABLE_DEBUG_MODE=false
# CLUSTER_WORKERS=max
# ENABLE_HELMET=true
# CORS_ORIGIN=https://yourdomain.com
# ENABLE_COMPRESSION=true
# ENABLE_METRICS=true

# =============================================================================
# CONFIGURATION VALIDATION NOTES
# =============================================================================
#
# 1. Environment Variable Precedence:
#    - System environment variables override .env file values
#    - Runtime configuration overrides system environment
#    - Command-line arguments take highest precedence
#
# 2. Required Variables:
#    - NODE_ENV: Must be set to appropriate environment
#    - PORT: Required for server binding (default 3000)
#    - HOST: Required for interface binding (default 127.0.0.1)
#
# 3. Security Considerations:
#    - Keep .env files out of version control
#    - Use .env.example as template only
#    - Validate all configuration values at startup
#    - Use secure values for production environments
#
# 4. Performance Impact:
#    - Log levels affect application performance
#    - File logging has I/O overhead
#    - Compression uses CPU resources
#    - Cluster workers should match available CPU cores
#
# 5. Monitoring Integration:
#    - Health check endpoint supports external monitoring
#    - Winston logs support log aggregation systems
#    - PM2 provides process monitoring capabilities
#    - Request IDs enable distributed tracing
#
# =============================================================================